class MyQueue {
public:
    
    stack<int> s1,s2;
    /** Initialize your data structure here. */
    MyQueue() {
      
    }
    
    /** Push element x to the back of queue. */
    void push(int x)
    {
        if(s1.empty() && s2.empty())
        {
            s1.push(x);
        }
        else if(s1.empty() && !s2.empty())
        {
            while(!s2.empty())
            {
                s1.push(s2.top());
                s2.pop();
            }
            s1.push(x);
        }
        else if(!s1.empty() && s2.empty())
        {
            s1.push(x);
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
     
        if(s1.empty() && s2.empty())
       {
           return -1;
       }
        
         else if(s1.empty() && !s2.empty())
         {
             int x=s2.top();
             s2.pop();
             return x;
         }
        
         else if(!s1.empty() && s2.empty())
         {
           while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
            }
         }
        int x=s2.top();
             s2.pop();
        return x;
    }
    
    /** Get the front element. */
    int peek() {
        if(s1.empty() && s2.empty())
       {
           return -1;
       }
        
         else if(s1.empty() && !s2.empty())
         {
             return s2.top();
         }
        
         else if(!s1.empty() && s2.empty())
         {
           while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
            }
         }
        int x=s2.top();
        return x;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
         if(s1.empty() && s2.empty())
       {
           return true;
       }
        return false;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
